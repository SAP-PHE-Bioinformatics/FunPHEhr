/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//       Let modules.config to store module configurations
process {

    withName: 'NANOPLOT' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/QC/NanoPlot/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHOPPER' {
        ext.args = ''
        ext.args2 = "-q ${params.min_q_score} -l ${params.min_read_length}"
        publishDir = [
            path: { "${params.outdir}/QC/chopper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PORECHOP_PORECHOP' {
        ext.args = ''
        ext.prefix = { "${meta.id}.porechop" }
        publishDir = [
            path: { "${params.outdir}/trimming/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args = '-x ava-ont'
    }

    withName: 'MINIMAP2_CONSENSUS' {
        ext.args = '-x map-ont'
    }

    withName: 'MINIMAP2_POLISH' {
        ext.args = '-x map-ont'
    }

    withName: 'MINIASM' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Miniasm" },
            mode: params.publish_dir_mode,
            pattern: '*.fasta.gz',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FLYE' {
        ext.args = {

            if ( meta.gsize && !meta.gsize.equals('NA') ){
                if ( !params.flye_args.contains("--g") ) {
                    "--g ${meta.gsize} ${params.flye_args}"
                } else {
                    params.flye_args ?: ''
                }
            } else {
                params.flye_args ?: ''
            }
        }
        publishDir = [
            path: { "${params.outdir}/flye/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else if (filename.endsWith('.log')) {
                    "${meta.id}.${filename}"
                } else {
                    filename
                }
            }
        ]
    }

    withName: 'RACON' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Miniasm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MEDAKA' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/Medaka/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KRAKEN2_READS' {
        ext.args = '--memory-mapping'
        publishDir = [
            path: { "${params.outdir}/Kraken2" },
            mode: params.publish_dir_mode,
            pattern: "*report.txt",
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else {
                    "${filename.replaceFirst('\\..+$', '')}_longreads${filename.substring(filename.lastIndexOf('.'))}"
                }
            }
        ]
    }

    withName: 'KRAKEN2_ASSEMBLY' {
        ext.args = '--memory-mapping'
        publishDir = [
            path: { "${params.outdir}/Kraken2" },
            mode: params.publish_dir_mode,
            pattern: "*report.txt",
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    null
                } else {
                    "${filename.replaceFirst('\\..+$', '')}_assembly${filename.substring(filename.lastIndexOf('.'))}"
                }
            }
        ]
    }

    withName: 'ITSX' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/ITS/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUAST' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/QUAST" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUSCO' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/BUSCO/${meta.id}/fungi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

       withName: 'BUSCO_AUTO' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/BUSCO/${meta.id}/specific" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
       }
    withName: 'FUNANNOTATE_PREDICT' {
        ext.args = '-d ${params.funannotate_db_dir}'
        publishDir = [
            path: { "${params.outdir}/Funannotate/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'BLAST_BLASTP' {
        ext.args = '-evalue 1e-6 -outfmt 6'
    }

    withName: 'INTERPROSCAN' {
        ext.args = [
            '-f TSV',
            '--iprlookup',
            '--goterms', 
            '-pa', 
            '-dp', 
            '-t p'
        ].join(' ').trim()
    }

    withName: 'MERGE_FUNC_ANNOTATION' {
        ext.args = [
            "-id $params.merge_annotation_identifier",
            '-pe 5',
            params.use_pcds ? "--pcds" : ""
        ].join(' ').trim()
        publishDir = [
            [
                path: "${params.outdir}/blast_tsv",
                mode: params.publish_dir_mode,
                pattern: "blast_merged.tsv"
            ],
            [
                path: "${params.outdir}/interproscan_tsv",
                mode: params.publish_dir_mode,
                pattern: "interproscan_merged.tsv"
            ],
            [
                path: "${params.outdir}/final_annotation",
                mode: params.publish_dir_mode,
                pattern: "*.gff"
            ]
        ]
    }


    withName: 'MULTIQC' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

   

